apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    configure([buildscript.repositories, project.repositories]) {
        mavenLocal()
        mavenCentral()
        maven {
            name "spring-releases"
            url "https://repo.spring.io/milestone"
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.12.RELEASE")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("io.springfox:springfox-swagger2:2.7.0")
    compile("io.springfox:springfox-swagger-ui:2.7.0")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.10")
/*    compile('org.springframework.cloud:spring-cloud-starter-sleuth:2.0.0.RELEASE')
    compile('org.springframework.cloud:spring-cloud-sleuth-core:2.0.0.RELEASE')*/

    testCompile("io.rest-assured:rest-assured:3.1.0")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

sourceSets {
    generated {
        java {
            srcDirs = ['src/main/generated']
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    //If you want to ensure that integration tests are run every time when you invoke
    //this task, uncomment the following line.
    outputs.upToDateWhen { false }
}

//Ensure that the check task fails the build if there are failing integration tests.
check.dependsOn integrationTest
//Ensure that our unit tests are run before our integration tests
integrationTest.mustRunAfter test

configurations {
    providedRuntime
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "${artifactory_contextUrl}${artifactory_publish_repo_prefix}-${version.endsWith('-SNAPSHOT') ? 'snapshot' : 'release'}"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
}

springBoot {
    buildInfo()
}

clean {
    delete sourceSets.generated.java.srcDirs
}
